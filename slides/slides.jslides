! ---------------------------------------
! LOADS / DEFINES
! ---------------------------------------
.default_line_height 1.0
.aspect 16 9


.load_font  header            data/Bitter-Regular.ttf
.load_font  code              data/SourceCodePro-Regular.ttf

.load_image refactoring_toon  refactoring.png
.load_image accordion         accordion.png
.load_image lisp              lisp_cycles.png


! ---------------------------------------
! SLIDE TEMPLATES
! ---------------------------------------

.slide Base
.background_color 255 255 255
.y .95

! ---------------------------------------
! ACTUAL SLIDES
! ---------------------------------------

.slide
.use_template Base

.y .5
.size 7
.color 0 0 0 
.align center
Refactoring Workshop
.
.size 3
Hosted by Justin Schiff



.slide
.use_template Base

.image refactoring_toon .pos .5 .5    .scale 80

! ---------------------------------------

.slide
.use_template Base

.color 0 0 0
.size 7
.y .5
Write the simplest code first.

.slide
.use_template Base

.color 0 0 0
.size 7
.y .5
Imperative, Procedural.

.notes
And then... <next slide> slinky it.

.slide
.use_template Base

.color 0 0 0
.size 7
.y .5
Slinky

.notes
What does that look like?

.slide
.use_template Base
.background_color 0 0 0
.color 232 223 199
.y .1
.size 4
.font code
.align left

str = ''
users = getFromDb('users')
for user in users -> 
  str += user.firstName + ' ' + user.lastName
  unless loop.last ->
    str += ', '

// ...

.notes
Pseudocode

.slide
.use_template Base
.background_color 0 0 0
.color 232 223 199
.y .1
.size 4
.font code
.align left

str = ''
users = getFromDb('users')
for user in users -> 
  str += user.firstName + ' ' + user.lastName
  unless loop.last ->
    str += ', '

// ...

str = ''
users = getFromDb('users')
for user in users -> 
  str += user.firstName + ' ' + user.lastName
  unless loop.last ->
    str += ', '

.notes
This is a simple example, but let it repeat until
abstractions become clear.

.slide
.use_template Base
.background_color 0 0 0
.color 232 223 199
.y .1
.size 4
.font code
.align left

str = ''
users = getFromDb('users')
for user in users -> 
  **str += user.firstName + ' ' + user.lastName**
  unless loop.last ->
    str += ', '

// ...

str = ''
users = getFromDb('users')
for user in users -> 
  str += user.firstName + ' ' + user.lastName
  unless loop.last ->
    str += ', '

.slide
.use_template Base
.background_color 0 0 0
.color 232 223 199
.y .1
.size 4
.font code
.align left

str = ''
users = getFromDb('users')
for user in users -> 
  **str += user.fullName()**
  unless loop.last ->
    str += ', '

User ->
  **fullName** ->
    "{firstName} {lastName}"

.slide
.use_template Base
.background_color 0 0 0
.color 232 223 199
.y .1
.size 4
.font code
.align left

**str = ''**
users = getFromDb('users')
for user in users -> 
  str += user.fullName()
  unless loop.last ->
    str += ', '

User ->
  fullName ->
    "{firstName} {lastName}"

.slide
.use_template Base
.background_color 0 0 0
.color 232 223 199
.y .1
.size 4
.font code
.align left

users = getFromDb('users')
str = **User.mapFullNames(users)**

User ->
  static **mapFullNames(users)** ->
    result = ''
    for user in users -> 
      result += user.fullName()
      unless loop.last ->
        str += ', '
    result
  fullName ->
    "{firstName} {lastName}"

.slide
.use_template Base
.background_color 0 0 0
.color 232 223 199
.y .1
.size 4
.font code
.align left

users = getFromDb('users')
str = **User.mapFullNames(users)**

// ...

users = getFromDb('users', { ... })
str = **User.mapFullNames(users)**

User ->
  // ...
! ---------------------------------------

.slide Extract Method
.use_template Base
.y .1
.size 7
.color 200 254 200
Extract Method

! ---------------------------------------

.slide
.use_template Extract Method
.y .25
.size 4
.align left

Extract method is often the first step of a refactoring, it helps you
notice patterns that you did not notice before.

Sometimes you will notice that the methods that you extract all have
similar names, or take the same parameters. This is important
and can be used in later refactorings.

.y .60
.color 200 128 128
Extracting too soon will lead to overly verbose and hard to follow code.

Extracting too late will lead to long procedural code that is difficult
to maintain, and difficult to change.

! ---------------------------------------

.slide
.use_template Base

.y .1
.size 7
.color 200 254 200
Replace Conditional with Polymorphism

.y .25
.align left
.left_margin .56
.size 3
.color 255 255 255
It is often useful to squint at your code
and see the general shape of it, are there
many conditions? is the nesting deep or
shallow?

Code often starts as a few conditionals.
Without **factoring as a continuous process**
it can often end up like this.

Often we are comparing to primitives types. In
javascript string and number are most frequent.
The term for this is **primitive obsession** .


.y .7
.color 200 128 128
Changing and understanding conditional logic
like this is almost impossible

.y .8
.color 128 200 128
Factoring as you go ensures this doesn't happen.

.y .8
.left_margin 0.1
.size 2
.color 255 255 255 128
Featured: A real code block from Shift3 code. I've highlighted
the conditionals in red. Code like this emerges from a small
conditional initially, but then just following the path of
least resistance it balloons.

Without factoring as a continuous process, code can easily
end up like that.

.y .25
.align left
.left_margin 0.1
.size 0.2
.font code
.color 255 255 255

.color 255 190 190
if (attr.dropType === DnDService.dragType) {
.color 255 255 255 64

  //then assign data from event to local variable, create variables
  var dropList;
  var dragList;
  var dragKey;
  var dragName;
  var dropSchedule;
  var key;
  var repeat;
  var list;
  var listName;
  var index;
  var row;
  var dragRow;

  //parse item data

  //if data doesnt exist
.color 255 190 190
  if (transferredObj !== true) {
.color 255 255 255 64

      //droplist is the droppable list
      dropList = scope.$eval(attr.droppable);

      //draglist is draggable list
      dragList = DnDService.dragList;

      //key for tracking current item
      dragKey = DnDService.dragKey;

      row = scope.$eval(attr.dropRow);
      dragRow = DnDService.dragRow;

      //name of dragged current item
      dragName = DnDService.dragName;

      //schedule that the item will be dropped in to
      dropSchedule = scope.$eval(attr.dropSchedule);

      //if item is already listed in droplist, assign repeat variable
      repeat = findPerson(dropList, transferredObj);

      //gets droppable list
      list = findDropList(attr.droppable);

      //gets name of droppable list
      listName = findListName(attr.droppable);

      //gets index of drag list
      index = findIndexByKeyValue(dragList, ['_id'], dragKey);

      //if droplist matches draglist
.color 255 150 165
      if ((dropList === dragList) &&
          (attr.dropType !== 'row-rearrange' &&
           attr.dropType !== 'meb-row-rearrange' &&
           attr.dropType !== 'am-row-rearrange' &&
           attr.dropType !== 'pm-row-rearrange')) {
.color 255 255 255 64
          //reject action
          toast.reject();

          //DEV NOTES
          /*
            * schedule
            * all
            * special case
            *
            * all - special case [main: yes, am: yes, pm: yes]
            * all - schedule [main: yes, am: yes, pm: yes]
            * schedule - all [main: yes, am: yes, pm: yes]
            *
            * special case - all [main: yes, am: yes, pm: yes]
            * special case - schedule [main: yes, am: yes, pm: yes]
            * schedule - special case [main: yes, am: yes, pm: yes]

            * */

          //if draglist is all of a certain draggable type (drivers, clients, locations)
.color 255 150 165
      } else if (dragList === scope.$eval('tempCtrl.client_lists') ||
                 dragList === scope.$eval('tempCtrl.driver_lists') ||
                 dragList === scope.$eval('tempCtrl.location_lists')) {
.color 255 255 255 64
          scope.$apply(function () {
              //and droplist is 'special' case
.color 255 150 165
              if (attr.droppable === 'tempCtrl.schedule.coaches_off' ||
                  attr.droppable === 'tempCtrl.schedule.no_shows' ||
                  attr.droppable === 'tempCtrl.schedule.cancelled' ||
                  attr.droppable === 'tempCtrl.schedule.am_off' ||
                  attr.droppable === 'tempCtrl.schedule.pm_off' ||
                  attr.droppable === 'tempCtrl.schedule.coaches_call_out') {
.color 255 255 255 64

                  //if the item isn't already there
.color 255 150 165
                  if (repeat === false) {
.color 255 255 255 64

                      //push onto droppable list
                      dropList.push(transferredObj);

                      //remove item from draggable list
                      dragList.splice(index, 1);

                      //update coaches off
.color 255 150 165
                      if (attr.droppable === 'tempCtrl.schedule.coaches_off') {
.color 255 255 255 64

                          templateService.updateTemplateCoachesOff(dropSchedule._id, dropSchedule.coaches_off, dayPart, pathSegments);
                      }

                      //update no shows
.color 255 150 165
                      if (attr.droppable === 'tempCtrl.schedule.no_shows') {
.color 255 255 255 64

                          templateService.updateTemplateNoShows(dropSchedule._id, dropSchedule.no_shows, dayPart, pathSegments);
                      }

                      //update cancelled
.color 255 150 165
                      if (attr.droppable === 'tempCtrl.schedule.cancelled') {
.color 255 255 255 64

                          templateService.updateTemplateCancelled(dropSchedule._id, dropSchedule.cancelled, dayPart, pathSegments);
                      }

.color 255 150 165
                      if (attr.droppable === 'tempCtrl.schedule.am_off') {
.color 255 255 255 64

                          templateService.updateTemplateAMOff(dropSchedule._id, dropSchedule.am_off, dayPart, pathSegments);
                      }

.color 255 150 165
                      if (attr.droppable === 'tempCtrl.schedule.pm_off') {
.color 255 255 255 64

                          templateService.updateTemplatePMOff(dropSchedule._id, dropSchedule.pm_off, dayPart, pathSegments);
                      }

.color 255 150 165
                      if (attr.droppable === 'tempCtrl.schedule.coaches_call_out') {
.color 255 255 255 64

                          templateService.updateTemplateCoachesCallOut(dropSchedule._id, dropSchedule.coaches_call_out, dayPart, pathSegments);
                      }

                      //if the item is already on the droppable list
.color 255 150 165
                  } else {
.color 255 255 255 64

                      //reject item
                      toast.error(transferredObj.firstname + ' is already there!');
                  }
                  //and droplist is schedule
.color 255 150 165
              } else {
.color 255 255 255 64

                  //if droplist is driver
.color 255 150 165
                  if (list === 'driver') {
.color 255 255 255 64

                      //check for more than one driver
.color 255 150 165
                      if (dropList.length > 0) {
.color 255 255 255 64
                          toast.error("There's a driver already!");

                          //if there isn't one driver yet
.color 255 150 165
                      } else {
.color 255 255 255 64
                          //push item to driver droplist
                          dropList.push(transferredObj);

                          //remove item from draglist
                          dragList.splice(index, 1);
                          rowService.updateRow(row)
                              .then(function (res) {
                                  toast.row('Dropped ' + transferredObj.firstname + ' In Coach');
                              })
                              .catch(function(err) {
                                  toast.error('There was an error updating the coaches, please refresh and try again');
                              });

                      }

                      //if droplist is location
.color 255 150 165
                  } else if (list === 'location') {
.color 255 255 255 64

                      //check for repeat item, if none
.color 255 150 165
                      if (repeat === false) {
.color 255 255 255 64

                          //push to location list
                          dropList.push(transferredObj);

                          rowService.updateRow(row)
                              .then(function (res) {
                                  toast.row('Dropped ' + transferredObj.business + ' In Location');
                              })
                              .catch(function(err) {
                                  toast.error('There was an error updating the location, please refresh and try again');
                              });

                          //if there is the same item already
.color 255 150 165
                      } else {
.color 255 255 255 64

                          //reject drop
                          toast.error(transferredObj.business + ' is already there!');
                      }

                      //otherwise if droplist is client
.color 255 150 165
                  } else {
.color 255 255 255 64
.color 255 150 165
                      if (repeat === false) {
.color 255 255 255 64
                          /* gets what list it drops to */
                          /* splices from drag list */
                          dropList.push(transferredObj);
                          dragList.splice(index, 1);

                          rowService.updateRow(row)
                              .then(function (res) {
                                  toast.row('Dropped ' + transferredObj.firstname + ' In People Served');
                              })
                              .catch(function(err) {
                                  toast.error('There was an error updating people served, please refresh and try again');
                              });
.color 255 150 165
                      } else {
.color 255 255 255 64
                          toast.error(transferredObj.firstname + ' is already there!');
                      }
                  }
              }
          });

.y 0.25
.left_margin 0.25
          //if droplist is all
.color 255 150 165
      } else if (attr.droppable === 'tempCtrl.client_lists' || attr.droppable === 'tempCtrl.driver_lists' || attr.droppable === 'tempCtrl.location_lists') {
.color 255 255 255 64
          scope.$apply(function () {

              repeat = findPerson(dropList, transferredObj);

              //and draglist is special case

.color 255 150 165
              if (dragList == scope.$eval('tempCtrl.schedule.am_off')) {
.color 255 255 255 64
                  dragList.splice(index, 1);
                  dropList.push(transferredObj);

                  return templateService.updateTemplateAMOff(dropSchedule._id, dropSchedule.am_off, dayPart, pathSegments);
              }
.color 255 150 165
              if (dragList == scope.$eval('tempCtrl.schedule.pm_off')) {
.color 255 255 255 64
                  dragList.splice(index, 1);
                  dropList.push(transferredObj);

                  return templateService.updateTemplatePMOff(dropSchedule._id, dropSchedule.pm_off, dayPart, pathSegments);
              }
.color 255 150 165
              if (dragList == scope.$eval('tempCtrl.schedule.cancelled')) {
.color 255 255 255 64
                  dragList.splice(index, 1);
                  dropList.push(transferredObj);

                  return templateService.updateTemplateCancelled(dropSchedule._id, dropSchedule.cancelled, dayPart, pathSegments);
              }
.color 255 150 165
              if (dragList == scope.$eval('tempCtrl.schedule.no_shows')) {
.color 255 255 255 64
                  dragList.splice(index, 1);
                  dropList.push(transferredObj);

                  return templateService.updateTemplateNoShows(dropSchedule._id, dropSchedule.no_shows, dayPart, pathSegments);
              }
.color 255 150 165
              if (dragList == scope.$eval('tempCtrl.schedule.coaches_off')) {
.color 255 255 255 64
                  dragList.splice(index, 1);
                  dropList.push(transferredObj);

                  return templateService.updateTemplateCoachesOff(dropSchedule._id, dropSchedule.coaches_off, dayPart, pathSegments);
              }
.color 255 150 165
              if (dragList == scope.$eval('tempCtrl.schedule.coaches_call_out')) {
.color 255 255 255 64
                  dragList.splice(index, 1);
                  dropList.push(transferredObj);

                  return templateService.updateTemplateCoachesCallOut(dropSchedule._id, dropSchedule.coaches_call_out, dayPart, pathSegments);
              }

              //and draglist is schedule

              //make sure you can drop location into locations
.color 255 150 165
              if (attr.droppable === 'tempCtrl.location_lists') {
.color 255 255 255 64
                  dragList.splice(index, 1);

                  rowService.updateRow(dragRow)
                      .then(function (res) {
                          toast.row('Returned ' + transferredObj.business + ' To All Locations');
                      })
                      .catch(function(err) {
                          toast.error('There was an error updating the location, please refresh and try again');
                      });
.color 255 150 165
              } else {
.color 255 255 255 64
                  //otherwise do normal blocking
.color 255 150 165
                  if (repeat === false) {
.color 255 255 255 64

                      dragList.splice(index, 1);
                      dropList.push(transferredObj);

                      //update main table

                      rowService.updateRow(dragRow)
                          .then(function (res) {

.color 255 150 165
                              if (transferredObj.type == 'client') {
.color 255 255 255 64
                                  toast.row('Returned ' + transferredObj.firstname + ' To All Clients');
.color 255 150 165
                              } else {
.color 255 255 255 64
                                  toast.row('Returned ' + transferredObj.firstname + ' To All Coaches');
                              }
                          })
                          .catch(function(err) {
                              toast.error('There was an error updating the coaches, please refresh and try again');
                          });

.color 255 150 165
                  } else {
.color 255 255 255 64
                      toast.error(transferredObj.firstname + ' is already there!');
                  }
              }

          });
          //if draglist is special case
.color 255 150 165

      } else if (dragList === scope.$eval('tempCtrl.schedule.am_off') ||
                 dragList === scope.$eval('tempCtrl.schedule.pm_off') ||
                 dragList === scope.$eval('tempCtrl.schedule.coaches_off') ||
                 dragList === scope.$eval('tempCtrl.schedule.cancelled') ||
                 dragList === scope.$eval('tempCtrl.schedule.no_shows') ||
                 dragList === scope.$eval('tempCtrl.schedule.coaches_call_out')) {
.color 255 255 255 64
          scope.$apply(function () {
              //and droplist is schedule
              var list = findListName(attr.droppable);
              var listName = findListName(attr.droppable);
              var index = findIndexByKeyValue(dragList, ['_id'], dragKey);

.color 255 150 165
              if (list === 'driver') {
.color 255 255 255 64
.color 255 150 165
                  if (dropList.length > 0) {
.color 255 255 255 64
                      toast.error("There's a driver already!");
.color 255 150 165
                  } else {
.color 255 255 255 64
                      /* splices from drag list */
                      dragList.splice(index, 1);
                      dropList.push(transferredObj);

                      rowService.updateRow(row)
                          .then(function (res) {
                              //update coaches off
.color 255 150 165
                              if (dragList === scope.$eval('tempCtrl.schedule.coaches_off')) {
.color 255 255 255 64
                                  return templateService.updateTemplateCoachesOff(dropSchedule._id, dragList, dayPart, pathSegments);
                              }

                              //update no shows
.color 255 150 165
                              if (dragList === scope.$eval('tempCtrl.schedule.no_shows')) {
.color 255 255 255 64
                                  return templateService.updateTemplateNoShows(dropSchedule._id, dragList, dayPart, pathSegments);
                              }

                              //update cancelled
.color 255 150 165
                              if (dragList === scope.$eval('tempCtrl.schedule.cancelled')) {
.color 255 255 255 64
                                  return templateService.updateTemplateCancelled(dropSchedule._id, dragList, dayPart, pathSegments);
                              }

                              //Update am off
.color 255 150 165
                              if (dragList === scope.$eval('tempCtrl.schedule.am_off')) {
.color 255 255 255 64
                                  return templateService.updateTemplateAMOff(dropSchedule._id, dragList, dayPart, pathSegments);
                              }

                              //Update pm off
.color 255 150 165
                              if (dragList === scope.$eval('tempCtrl.schedule.pm_off')) {
.color 255 255 255 64
                                  return templateService.updateTemplatePMOff(dropSchedule._id, dragList, dayPart, pathSegments);
                              }

                              //Update coaches call out
.color 255 150 165
                                if (dragList === scope.$eval('tempCtrl.schedule.coaches_call_out')) {
.color 255 255 255 64
                                  return templateService.updateTemplateCoachesCallOut(dropSchedule._id, dragList, dayPart, pathSegments);
                              }
                          })
                          .catch(function(err) {
                              toast.error('There was an error during the update, please refresh and try again');
                          });
                  }
.color 255 150 165
              } else {
.color 255 255 255 64
                  //check for special to special
                  //TODO: This is where app rejects box dragging between "special" boxes. Try to fix it so they can drag whereever they want
.color 255 150 165
                  if (attr.droppable === 'tempCtrl.schedule.coaches_off' ||
                      attr.droppable === 'tempCtrl.schedule.no_shows' ||
                      attr.droppable === 'tempCtrl.schedule.cancelled' ||
                      attr.droppable === 'tempCtrl.schedule.am_off' ||
                      attr.droppable === 'tempCtrl.schedule.pm_off' ||
                      attr.droppable === 'tempCtrl.schedule.coaches_call_out') {
.color 255 255 255 64

                      return toast.error('Please Return To All First');
                  }
                  repeat = findPerson(dropList, transferredObj);

.color 255 150 165
                  if (repeat === false) {
.color 255 255 255 64

                      /* gets what list it drops to */
                      /* splices from drag list */
                      dragList.splice(index, 1);
                      dropList.push(transferredObj);

                      rowService.updateRow(row)
                          .then(function (res) {

                              //update coaches off
.color 255 150 165
                              if (dragList === scope.$eval('tempCtrl.schedule.coaches_off')) {
.color 255 255 255 64
                                  return templateService.updateTemplateCoachesOff(dropSchedule._id, dragList, dayPart, pathSegments);
                              }

                              //update no shows
.color 255 150 165
                              if (dragList === scope.$eval('tempCtrl.schedule.no_shows')) {
.color 255 255 255 64
                                  return templateService.updateTemplateNoShows(dropSchedule._id, dragList, dayPart, pathSegments);
                              }

                              //update cancelled
.color 255 150 165
                              if (dragList === scope.$eval('tempCtrl.schedule.cancelled')) {
.color 255 255 255 64
                                  return templateService.updateTemplateCancelled(dropSchedule._id, dragList, dayPart, pathSegments);
                              }

.color 255 150 165
                              if (dragList === scope.$eval('tempCtrl.schedule.am_off')) {
.color 255 255 255 64
                                  return templateService.updateTemplateAMOff(dropSchedule._id, dragList, dayPart, pathSegments);
                              }

.color 255 150 165
                              if (dragList === scope.$eval('tempCtrl.schedule.pm_off')) {
.color 255 255 255 64
                                  return templateService.updateTemplatePMOff(dropSchedule._id, dragList, dayPart, pathSegments);
                              }

.color 255 150 165
                              if (dragList === scope.$eval('tempCtrl.coaches_call_out')) {
.color 255 255 255 64
                                  return templateService.updateTemplateCoachesCallOut(dropSchedule._id, dragList, dayPart, pathSegments);
                              }

.y 0.25
.left_margin 0.41
                          })
                          .catch(function(err) {
                              toast.error('There was an error during the update, please refresh and try again');
                          });
.color 255 150 165
                  } else {
.color 255 255 255 64
                      toast.error(transferredObj.firstname + ' is already there!');
                  }
              }
          });
.color 255 150 165
      } else {
.color 255 255 255 64
          //if draglist is schedule
          scope.$apply(function () {
              var list = findListName(attr.droppable);
              var listName = findListName(attr.droppable);
              var index = findIndexByKeyValue(dragList, ['_id'], dragKey);

.color 255 150 165
              if (list === 'driver') {
.color 255 255 255 64
.color 255 150 165
                  if (dropList.length > 0) {
.color 255 255 255 64
                      toast.error("There's a driver already!");
.color 255 150 165
                  } else {
.color 255 255 255 64
                      /* splices from drag list */
                      dragList.splice(index, 1);
                      DnDService.dropHome.push(transferredObj);
                      toast.row(transferredObj.firstname + ' returned to all coaches.');
                      rowService.updateRow(dragRow)
                          .then(function (res) {})
                          .catch(function(err) {
                              toast.error('There was an error during the update, please refresh and try again');
                          });
                  }
.color 255 150 165
              } else {
.color 255 255 255 64
                  repeat = findPerson(dropList, transferredObj);
.color 255 150 165
                  if (repeat === false) {
.color 255 255 255 64
                      /* gets what list it drops to */
                      /* splices from drag list */
.color 255 150 165
                      if (attr.dropType === 'location') {
.color 255 255 255 64
                          toast.error('Locations must be dragged to and from "All Locations."');
.color 255 150 165
                      } else if ((DnDService.dragHold === false) && isRowRearrange(attr.dropType)) {
.color 255 255 255 64
                          //ADDED Nov.2017 to rearrange schedule rows -RJH
                          var tableType = attr.dropType;
                          var itemToBeMoved = DnDService.dropHome.slice(index, (index + 1));
                          DnDService.dropHome.splice(index, 1);
                          DnDService.dropHome.splice(DnDService.dropIndex, 0, itemToBeMoved[0]);
                          var newOrder = DnDService.dropHome.map(function (item) {
                              var newIndex = DnDService.dropHome.indexOf(item);
                              return item._id;
                          });
                          var reqObj = {
                              newOrder: newOrder,
                              tableType: tableType
                          };

.color 255 150 165
                          if (location == 'Master Schedule ') {
.color 255 255 255 64
                              var pathSegments = currentPath.split('/');
                              var day = pathSegments[pathSegments.length - 2].trim();
                              return templateService.updateRowsInTemplate(day, reqObj)
                                  .then(function (res) {
                                      moveRow(dropList[index], itemToBeMoved[0], DnDService.dragName);
                                  })
                                  .catch(function(err) {
                                      $rootScope.loading = false;
                                      toast.error('There was an error during the update, please refresh and try again');
                                  });
.color 255 150 165
                          } else {
.color 255 255 255 64
                              return templateService.updateRowsInTemplate(DnDService.dragSchedule._id, reqObj)
                                  .then(function (res) {
                                      moveRow(dropList[index], itemToBeMoved[0], DnDService.dragName);
                                  })
                                  .catch(function(err) {
                                      $rootScope.loading = false;
                                      toast.error('There was an error during the update, please refresh and try again');
                                  });
                          }
                          //END added Nov.2017 to rearrange the main schedule rows -RJH
.color 255 150 165
                      } else {
.color 255 255 255 64
                          dragList.splice(index, 1);
                          DnDService.dropHome.push(transferredObj); // can't drag row to row. put back in home container
                          transferredObj.firstname ? toast.row(transferredObj.firstname + ' returned to all people.') : toast.error('Row move was cancelled.');
                      }
                      rowService.updateRow(dragRow)
                          .then(function (res) {
                              //and droplist is special

                              //update coaches off
.color 255 150 165
                              if (dropList === scope.$eval('tempCtrl.schedule.coaches_off')) {
.color 255 255 255 64
                                  return templateService.updateTemplateCoachesOff(dropSchedule._id, dropList, dayPart, pathSegments);
                              }

                              //update no shows
.color 255 150 165
                              if (dropList === scope.$eval('tempCtrl.schedule.no_shows')) {
.color 255 255 255 64
                                  return templateService.updateTemplateNoShows(dropSchedule._id, dropList, dayPart, pathSegments);
                              }

                              //update cancelled
.color 255 150 165
                              if (dropList === scope.$eval('tempCtrl.schedule.cancelled')) {
.color 255 255 255 64
                                  return templateService.updateTemplateCancelled(dropSchedule._id, dropList, dayPart, pathSegments);
                              }

.color 255 150 165
                              if (dropList === scope.$eval('tempCtrl.schedule.am_off')) {
.color 255 255 255 64
                                  return templateService.updateTemplateAMOff(dropSchedule._id, dropList, dayPart, pathSegments);
                              }

.color 255 150 165
                              if (dropList === scope.$eval('tempCtrl.schedule.pm_off')) {
.color 255 255 255 64
                                  return templateService.updateTemplatePMOff(dropSchedule._id, dropList, dayPart, pathSegments);
                              }

.color 255 150 165
                              if (dropList === scope.$eval('tempCtrl.schedule.coaches_call_out')) {
.color 255 255 255 64
                                  return templateService.updateTemplateCoachesCallOut(dropSchedule._id, dropList, dayPart, pathSegments);
                              }
                          })
                          .catch(function(err) {
                              toast.error('There was an error during the update, please refresh and try again');
                          });

.color 255 150 165
                  } else {
.color 255 255 255 64
                      toast.error(transferredObj.firstname + ' is already there!');
                  }
              }
          });
      }
  }

  //if draggable item is dropped into the wrong type
.color 255 150 165
} else {
.color 255 255 255 64
  //reject item
  toast.error("Types Don't Match");
}

! ---------------------------------------

.slide
.use_template Base

.y .1
.size 7
.color 200 254 200
Replace Conditional with Null Object

.y .25
.color 255 255 255
.size 4
.align left
Nulls and null checks tend to reproduce themselves across an application.

.font code
.color 255 255 255 128
//
.color 235 235 180
if (user && user.property) { /* do some stuff */ }
.color 255 255 255 128
//

.font header
.color 255 255 255
If we are unsure the user even exists it causes uncertainty. We must check
whether user exists **every time** we want to access a property off of it.

Many of these patterns utilize **duck typing** to allow us to just send a
message and expect the object we are using to comply to the implicit interface.

In many statically typed languages, you can make the interface explicit.
.font code
.color 255 255 255 128
//
.color 235 235 180
class User     implements UserI   {}
class NullUser implements UserI   {}
.color 255 255 255 128
//

! ---------------------------------------
.slide
.use_template Base

.y .1
.size 7
.color 200 254 200
Different Perspectives

.y .25
.color 255 255 255
.size 4
.align left
Refactoring can be aided by a broader perspetive of programming paradigms.
**Functional Programming**
// Insight into state, pure functions.

**List Processing Languages (lisp, scheme)**
// Composability, computing, code as data.
.image lisp .scale 35   .pos .5 .75

! ---------------------------------------

.slide
.background_color 10 80 30

.align left
Left aligned

.align right
Right aligned
